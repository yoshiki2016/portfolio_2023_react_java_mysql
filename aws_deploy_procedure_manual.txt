# ローカルのPCからSSH でEC2へアクセスする。
# SSH_KEY: SSHキーを指定
# EC2_IP : EC2インスタンスのIPアドレスを指定
[MacBook-Pro] ~
% ssh -i ~/.ssh/<SSH_KEY> ec2-user@<EC2_IP>
   ,     #_
   ~\_  ####_        Amazon Linux 2023
  ~~  \_#####\
  ~~     \###|
  ~~       \#/ ___   https://aws.amazon.com/linux/amazon-linux-2023
   ~~       V~' '->
    ~~~         /
      ~~._.   _/
         _/ _/
       _/m/'
Last login: Sat Jun 24 08:18:01 2023 from 14.12.150.161

################################################################################################################################################
# tmuxをインストールする。
[ec2-user@ip-10-0-3-60 ~]$ sudo dnf install tmux
Last metadata expiration check: 0:05:11 ago on Sat Jul 22 07:59:53 2023.
Dependencies resolved.
===========================================================================================================================================
 Package                    Architecture                 Version                                   Repository                         Size
===========================================================================================================================================
Installing:
 tmux                       x86_64                       3.2a-3.amzn2023.0.2                       amazonlinux                       478 k
~~省略~~

Installed:
  tmux-3.2a-3.amzn2023.0.2.x86_64

Complete!

################################################################################################################################################
# nvm のインストール
[ec2-user@ip-10-0-3-60 ~]$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
~~省略~~
=> Appending nvm source string to /home/ec2-user/.bashrc
=> Appending bash_completion source string to /home/ec2-user/.bashrc
=> Close and reopen your terminal to start using nvm or run the following to use it now:

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# ターミナルを抜ける
[ec2-user@ip-10-0-3-60 ~]$ exit
logout
Connection to <EC2_IP> closed.

# EC2に再接続
# SSH_KEY: SSHキーを指定
# EC2_IP : EC2インスタンスのIPアドレスを指定
[MacBook-Pro] ~
% ssh -i ~/.ssh/<SSH_KEY> ec2-user@<EC2_IP>

# nvmのバージョン確認
[ec2-user@ip-10-0-3-60 ~]$ nvm --version
0.39.0

# node 20.2.0 のインストール
[ec2-user@ip-10-0-3-60 ~]$ nvm install 20.2.0
Downloading and installing node v20.2.0...
Downloading https://nodejs.org/dist/v20.2.0/node-v20.2.0-linux-x64.tar.xz...
#################################################################################################################################### 100.0%
Computing checksum with sha256sum
Checksums matched!
Now using node v20.2.0 (npm v9.6.6)
Creating default alias: default -> 20.2.0 (-> v20.2.0)
[ec2-user@ip-10-0-3-60 ~]$ node  -v
v20.2.0

# mysqlのリポジトリーをインストールする。
[ec2-user@ip-10-0-3-60 ~]$ sudo dnf -y localinstall  https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
Last metadata expiration check: 0:04:39 ago on Sat Jun 24 08:23:36 2023.
mysql80-community-release-el9-1.noarch.rpm                                            35 kB/s |  10 kB     00:00
Dependencies resolved.
=====================================================================================================================
 Package                                 Architecture         Version               Repository                  Size
=====================================================================================================================
Upgrading:
 mysql80-community-release               noarch               el9-1                 @commandline                10 k

Transaction Summary
=====================================================================================================================
Upgrade  1 Package
~~省略~~

Upgraded:
  mysql80-community-release-el9-1.noarch

Complete!

# mysql-clientをインストールする。
[ec2-user@ip-10-0-3-60 ~]$ sudo dnf -y install mysql mysql-community-client
MySQL 8.0 Community Server                                                            21 MB/s | 839 kB     00:00
MySQL Connectors Community                                                           1.1 MB/s |  19 kB     00:00
MySQL Tools Community                                                                9.6 MB/s | 283 kB     00:00
~~省略~~
Installed:
  mysql-community-client-8.0.33-1.el9.x86_64            mysql-community-client-plugins-8.0.33-1.el9.x86_64
  mysql-community-common-8.0.33-1.el9.x86_64            mysql-community-libs-8.0.33-1.el9.x86_64

Complete!

# mysql-clientのバージョンを確認
[ec2-user@ip-10-0-3-60 ~]$ mysql --version
mysql  Ver 8.0.33 for Linux on x86_64 (MySQL Community Server - GPL)

################################################################################################################################################
# mysql-clientを使ってRDSへ接続する。
# RDS_ENDPOINT: RDSのエンドポイントを指定
# RDSを作る前にパラメーターグループを設定
# https://itneko.com/mysql-rds-parameter-group/
[ec2-user@ip-10-0-3-60 ~]$ mysql -h <RDS_ENDPOINT> -P 3306 -u root -p
Enter password:
~~省略~~

# time_zoneがAsia/Tokyoに変わっていることを確認
mysql> show global variables like '%time_zone%';
+------------------+------------+
| Variable_name    | Value      |
+------------------+------------+
| system_time_zone | UTC        |
| time_zone        | Asia/Tokyo |
+------------------+------------+
2 rows in set (0.01 sec)

# DBの作成
mysql> CREATE DATABASE portfolio_db;
Query OK, 1 row affected (0.00 sec)

# DBの一覧確認
mysql> Show Databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| portfolio_db       |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

# 使用するDBを設定
mysql> Use portfolio_db;
Database changed

# usersテーブル作成
mysql> CREATE TABLE users ( id int unsigned AUTO_INCREMENT, given_name VARCHAR(100) NOT NULL, family_name VARCHAR(100) NOT NULL, user_name VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL, email VARCHAR(100) NOT NULL, PRIMARY KEY(id));
Query OK, 0 rows affected (0.03 sec)

# tweetsテーブル作成
mysql> CREATE TABLE tweets ( id int unsigned AUTO_INCREMENT, tweet VARCHAR(500) NOT NULL, created_at DATETIME NOT NULL, user_id int unsigned NOT NULL, PRIMARY KEY(id), CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE RESTRICT ON UPDATE CASCADE);
Query OK, 0 rows affected (0.03 sec)

# DBにあるテーブルの一覧取得
mysql> Show Tables;
+------------------------+
| Tables_in_portfolio_db |
+------------------------+
| tweets                 |
| users                  |
+------------------------+
2 rows in set (0.00 sec)

# テストデーターの挿入3件(users)
mysql> INSERT INTO users (id, given_name, family_name, user_name, password, email) VALUES (1, '花子', '田中', 't_hanako', 'Abc12345', 'abc@gmail.com');
Query OK, 1 row affected (0.01 sec)
myslq> INSERT INTO users (id, given_name, family_name, user_name, password, email) VALUES (2, '太郎', '山田', 'y_tarou', 'Abc12345', 'efg@gimail.com');
Query OK, 1 row affected (0.00 sec)
mysql> INSERT INTO users (id, given_name, family_name, user_name, password, email) VALUES (3, '良樹', '新屋', 's_yoshiki', 'Abc12345', '123@gmail.com');
Query OK, 1 row affected (0.00 sec)

# usersテーブルのレコード取得
mysql> Select * From users;
+----+------------+-------------+-----------+----------+----------------+
| id | given_name | family_name | user_name | password | email          |
+----+------------+-------------+-----------+----------+----------------+
|  1 | 花子       | 田中        | t_hanako  | Abc12345 | abc@gmail.com  |
|  2 | 太郎       | 山田        | y_tarou   | Abc12345 | efg@gimail.com |
|  3 | 良樹       | 新屋        | s_yoshiki | Abc12345 | 123@gmail.com  |
+----+------------+-------------+-----------+----------+----------------+
3 rows in set (0.00 sec)

# 2023/07/22 19:44頃実行
# テストデーターの挿入3件(tweets)
mysql> INSERT INTO tweets (id, tweet, created_at, user_id) VALUES (1, '田中花子初Tweet', NOW(), 3);
Query OK, 1 row affected (0.01 sec)
mysql> INSERT INTO tweets (id, tweet, created_at, user_id) VALUES (2, 'React.js楽しい', NOW(), 1);
Query OK, 1 row affected (0.00 sec)
mysql> INSERT INTO tweets (id, tweet, created_at, user_id) VALUES (3, 'Java楽しい', NOW(), 2);
Query OK, 1 row affected (0.00 sec)

# tweetsテーブルのレコード取得
mysql> Select * From tweets;
+----+----------------------+---------------------+---------+
| id | tweet                | created_at          | user_id |
+----+----------------------+---------------------+---------+
|  1 | 田中花子初Tweet      | 2023-07-22 19:44:35 |       3 |
|  2 | React.js楽しい       | 2023-07-22 19:44:48 |       1 |
|  3 | Java楽しい           | 2023-07-22 19:44:58 |       2 |
+----+----------------------+---------------------+---------+
3 rows in set (0.00 sec)

mysql> exit;
Bye

################################################################################################################################################
# EC2インスタンスにソースコードをデプロイ、設定ファイルを環境に合わせる。
# GitHubからソースコードをダウンロード
[ec2-user@ip-10-0-3-60 ~]$ git clone https://github.com/yoshiki2016/portfolio_2023_react_java_mysql.git
Cloning into 'portfolio_2023_react_java_mysql'...
remote: Enumerating objects: 1090, done.
remote: Counting objects: 100% (241/241), done.
remote: Compressing objects: 100% (97/97), done.
remote: Total 1090 (delta 102), reused 239 (delta 102), pack-reused 849
Receiving objects: 100% (1090/1090), 864.89 KiB | 18.40 MiB/s, done.
Resolving deltas: 100% (395/395), done.


# Springの設定ファイルのあるディレクトリーに移動する
[ec2-user@ip-10-0-3-60 ~]$ cd portfolio_2023_react_java_mysql/src/main/resources/
[ec2-user@ip-10-0-3-60 resources]$ ls
application.properties  com

# Springの設定ファイルを上書きする
# RDS_ENDPOINT: RDSのエンドポイントを指定
# RDS_PORT    : RDSのポートを指定(MySQLのデフォルト3306を使用)
# RDS_USER    : RDSのユーザー名
# RDS_PASS    : RDSのパスワード
[ec2-user@ip-10-0-3-60 resources]$ vim application.properties
spring.datasource.url=jdbc:mysql://<RDS_ENDPOINT>:<RDS_PORT>/portfolio_db
spring.datasource.username=<RDS_USER>
spring.datasource.password=<RDS_PASS>

# ソースコードのルートディレクトリに移動
[ec2-user@ip-10-0-3-60 resources]$ cd ~/portfolio_2023_react_java_mysql/

# SpringのControllerとフロントのhooks配下のファイルで
# localhostをEC2インスタンスのパブリックIPに変更、こちらは省略します。

# tmuxを使い画面を分割する
[ec2-user@ip-10-0-3-60 portfolio_2023_react_java_mysql]$ tmux

# Ctrl-b c 新規ウィンドウを作成
# Ctrl-b 数字 数字で指定したウィンドウに移動
# 0枚目 springの起動
[ec2-user@ip-10-0-3-60 portfolio_2023_react_java_mysql]$ ./gradlew bootRun

> Task :bootRun

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.1.0)

2023-07-22T11:01:57.687Z  INFO 9343 --- [           main] c.e.portfolio.java.mysql.Application     : Starting Application using Java 17.0.7 with PID 9343 (/home/ec2-user/portfolio_2023_react_java_mysql/build/classes/java/main started by ec2-user in /home/ec2-user/portfolio_2023_react_java_mysql)
2023-07-22T11:01:57.691Z  INFO 9343 --- [           main] c.e.portfolio.java.mysql.Application     : No active profile set, falling back to 1 default profile: "default"
2023-07-22T11:01:59.076Z  INFO 9343 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2023-07-22T11:01:59.092Z  INFO 9343 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-07-22T11:01:59.093Z  INFO 9343 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.8]
2023-07-22T11:01:59.279Z  INFO 9343 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-07-22T11:01:59.281Z  INFO 9343 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1518 ms
2023-07-22T11:02:00.394Z  INFO 9343 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2023-07-22T11:02:00.410Z  INFO 9343 --- [           main] c.e.portfolio.java.mysql.Application     : Started Application in 3.254 seconds (process running for 3.965)
<==========---> 80% EXECUTING [15s]
> :bootRun

# Ctrl-b 数字 数字で指定したウィンドウに移動
# 1枚目に移動、Nodeパッケージのインストール
[ec2-user@ip-10-0-3-60 portfolio_2023_react_java_mysql]$ cd frontend/
[ec2-user@ip-10-0-3-60 frontend]$ npm i
[ec2-user@ip-10-0-3-60 frontend]$ ls | grep node
node_modules
[ec2-user@ip-10-0-3-60 frontend]$ npm run start
Starting the development server...

# Ctrl-b 数字 数字で指定したウィンドウに移動
# 2枚目に移動、freeコマンドでメモリーの空きがあるか確認
[ec2-user@ip-10-0-3-60 portfolio_2023_react_java_mysql]$ free -m
               total        used        free      shared  buff/cache   available
Mem:            3828        1556        1648           8         623        2040
Swap:              0           0           0

# ブラウザで以下のURLにアクセス
# EC2_IP : EC2インスタンスのIPアドレスを指定
<EC2_IP>:3000
